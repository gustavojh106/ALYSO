-- =================== TABLAS ===========================

-- Tabla CLIENTE
CREATE TABLE SYSTEM.CLIENTE (
  ID_CLIENTE NUMBER GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE      VARCHAR2(100 BYTE),
  CORREO      VARCHAR2(100 BYTE),
  TELEFONO    VARCHAR2(20 BYTE),
  APELLIDO    VARCHAR2(100 BYTE)
)
TABLESPACE USERS;

-- Tabla PEDIDO
CREATE TABLE SYSTEM.PEDIDO (
  ID_PEDIDO   NUMBER GENERATED BY DEFAULT AS IDENTITY,
  ID_CLIENTE  NUMBER,
  FECHA       DATE DEFAULT SYSDATE,
  TOTAL       NUMBER(10,2),
  ESTADO VARCHAR2(20 BYTE) NULL;

)
TABLESPACE USERS;

-- Tabla PRODUCTO
CREATE TABLE SYSTEM.PRODUCTO (
  ID_PRODUCTO   NUMBER GENERATED BY DEFAULT AS IDENTITY,
  NOMBRE        VARCHAR2(100 BYTE),
  PRECIO        NUMBER(10,2),
  DESCRIPCION   VARCHAR2(200 BYTE),
  ESTADO        CHAR(1 BYTE) DEFAULT 'A',
  STOCK NUMBER DEFAULT 0 NULL
)
TABLESPACE USERS;

-- Tabla PEDIDO_PRODUCTO
CREATE TABLE SYSTEM.PEDIDO_PRODUCTO (
  ID_PEDIDO        NUMBER,
  ID_PRODUCTO      NUMBER,
  CANTIDAD         NUMBER(5,0),
  PRECIO_UNITARIO  NUMBER(10,2),
  PERSONALIZADO    CHAR(1 BYTE) DEFAULT 'N'
)
TABLESPACE USERS;

-- Tabla DISENO_PERSONALIZADO
CREATE TABLE SYSTEM.DISENO_PERSONALIZADO (
  ID_DISENO       NUMBER,
  ID_PEDIDO       NUMBER,
  DESCRIPCION     VARCHAR2(200 BYTE),
  IMAGEN BLOB,
  FECHA_REGISTRO  DATE DEFAULT SYSDATE,
  ESTADO          VARCHAR2(10 BYTE) DEFAULT 'Activo'
)
TABLESPACE USERS;

CREATE TABLE SYSTEM.ENVIO (
  ID_ENVIO      NUMBER,
  ID_PEDIDO     NUMBER,
  FECHA_ENVIO   DATE DEFAULT SYSDATE,
  EMPRESA       VARCHAR2(100 BYTE) DEFAULT 'CORREOS DE COSTA RICA',
  ESTADO_ENVIO  VARCHAR2(20 BYTE) DEFAULT 'PENDIENTE',
  DETALLE       VARCHAR2(200 BYTE)
)
TABLESPACE USERS;
/


-- =================== CONSTRAINTS ======================

-- CLIENTE
ALTER TABLE SYSTEM.CLIENTE ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE);

-- PEDIDO
ALTER TABLE SYSTEM.PEDIDO ADD CONSTRAINT PK_PEDIDO PRIMARY KEY (ID_PEDIDO);
ALTER TABLE SYSTEM.PEDIDO ADD CONSTRAINT FK_PEDIDO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES SYSTEM.CLIENTE(ID_CLIENTE);

-- PRODUCTO
ALTER TABLE SYSTEM.PRODUCTO ADD CONSTRAINT PK_PRODUCTO PRIMARY KEY (ID_PRODUCTO);
ALTER TABLE SYSTEM.PRODUCTO ADD CONSTRAINT CK_PRODUCTO_ESTADO CHECK (ESTADO IN ('A', 'I'));

-- PEDIDO_PRODUCTO
ALTER TABLE SYSTEM.PEDIDO_PRODUCTO ADD CONSTRAINT PK_PEDIDO_PRODUCTO PRIMARY KEY (ID_PEDIDO, ID_PRODUCTO);
ALTER TABLE SYSTEM.PEDIDO_PRODUCTO ADD CONSTRAINT FK_PP_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES SYSTEM.PEDIDO(ID_PEDIDO);
ALTER TABLE SYSTEM.PEDIDO_PRODUCTO ADD CONSTRAINT FK_PP_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES SYSTEM.PRODUCTO(ID_PRODUCTO);
ALTER TABLE SYSTEM.PEDIDO_PRODUCTO ADD CONSTRAINT CK_PP_PERSONALIZADO CHECK (PERSONALIZADO IN ('S', 'N'));

-- DISENO_PERSONALIZADO
ALTER TABLE SYSTEM.DISENO_PERSONALIZADO ADD CONSTRAINT PK_DISENO_PERSONALIZADO PRIMARY KEY (ID_DISENO);
ALTER TABLE SYSTEM.DISENO_PERSONALIZADO ADD CONSTRAINT FK_DISENO_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES SYSTEM.PEDIDO(ID_PEDIDO);


--CREATE OR REPLACE TRIGGER SYSTEM.TRG_ACTUALIZAR_TOTAL_PEDIDO
--AFTER INSERT ON SYSTEM.PEDIDO_PRODUCTO
--FOR EACH ROW
--BEGIN
--  UPDATE SYSTEM.PEDIDO
--  SET TOTAL = (
--    SELECT NVL(SUM(CANTIDAD * PRECIO_UNITARIO), 0)
--    FROM SYSTEM.PEDIDO_PRODUCTO
--    WHERE ID_PEDIDO = :NEW.ID_PEDIDO
--  )
--  WHERE ID_PEDIDO = :NEW.ID_PEDIDO;
--END;
--/
-- ====================================================CRUD CLIENTE====================================================
-- ========================== INSERTAR ==========================
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CLIENTE(
    p_nombre    IN VARCHAR2,
    p_apellido  IN VARCHAR2,
    p_telefono  IN VARCHAR2,
    p_correo    IN VARCHAR2
) AS
    v_nuevo_id NUMBER;
BEGIN
    -- Obtener el siguiente ID manualmente
    SELECT NVL(MAX(ID_CLIENTE), 0) + 1 INTO v_nuevo_id FROM CLIENTE;

    INSERT INTO CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO)
    VALUES (v_nuevo_id, p_nombre, p_apellido, p_telefono, p_correo);
END;
/
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_CLIENTE_POR_EMAIL (
    p_email  IN  VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT
        ID_CLIENTE,
        NOMBRE,
        APELLIDO,
        CORREO,
        TELEFONO
    FROM CLIENTE
    WHERE CORREO = p_email;
END SP_CONSULTAR_CLIENTE_POR_EMAIL;
/
-- SP_INSERTAR_PEDIDO: calcula el próximo ID_PEDIDO y lo retorna
CREATE OR REPLACE PROCEDURE SP_INSERTAR_PEDIDO (
    p_idCliente   IN  NUMBER,
    p_total       IN  NUMBER,
    p_idPedidoOut OUT NUMBER
) AS
BEGIN
  -- 1) Calcular el siguiente ID_PEDIDO
  SELECT NVL(MAX(ID_PEDIDO), 0) + 1
    INTO p_idPedidoOut
    FROM SYSTEM.PEDIDO;

  -- 2) Insertar usando ese ID
  INSERT INTO SYSTEM.PEDIDO (
      ID_PEDIDO,
      ID_CLIENTE,
      FECHA,
      TOTAL
  ) VALUES (
      p_idPedidoOut,
      p_idCliente,
      SYSDATE,
      p_total
  );
END SP_INSERTAR_PEDIDO;
/

-- SP_INSERTAR_PEDIDO_PRODUCTO: sigue igual (no genera IDs propios)
CREATE OR REPLACE PROCEDURE SP_INSERTAR_PEDIDO_PRODUCTO (
    p_idPedido       IN NUMBER,
    p_idProducto     IN NUMBER,
    p_cantidad       IN NUMBER,
    p_precioUnitario IN NUMBER,
    p_personalizado  IN CHAR
) AS
BEGIN
  INSERT INTO SYSTEM.PEDIDO_PRODUCTO (
      ID_PEDIDO,
      ID_PRODUCTO,
      CANTIDAD,
      PRECIO_UNITARIO,
      PERSONALIZADO
  ) VALUES (
      p_idPedido,
      p_idProducto,
      p_cantidad,
      p_precioUnitario,
      p_personalizado
  );
END SP_INSERTAR_PEDIDO_PRODUCTO;
/
-- SP_INSERTAR_DISENO_PERSONALIZADO: calcula el próximo ID_DISENO y lo retorna
CREATE OR REPLACE PROCEDURE SP_INSERTAR_DISENO_PERSONALIZADO (
    p_idPedido     IN  NUMBER,
    p_descripcion  IN  VARCHAR2,
    p_imagen       IN  BLOB,
    p_idDisenoOut  OUT NUMBER
) AS
BEGIN
  -- Calcular nuevo ID
  SELECT NVL(MAX(ID_DISENO),0)+1
    INTO p_idDisenoOut
    FROM SYSTEM.DISENO_PERSONALIZADO;

  INSERT INTO SYSTEM.DISENO_PERSONALIZADO (
      ID_DISENO,
      ID_PEDIDO,
      DESCRIPCION,
      IMAGEN,
      FECHA_REGISTRO,
      ESTADO
  ) VALUES (
      p_idDisenoOut,
      p_idPedido,
      p_descripcion,
      p_imagen,
      SYSDATE,
      'Activo'
  );
END SP_INSERTAR_DISENO_PERSONALIZADO;
/
-- Modificación de SP_INSERTAR_PRODUCTO para calcular manualmente el próximo ID
CREATE OR REPLACE PROCEDURE SP_INSERTAR_PRODUCTO (
    p_nombre      IN VARCHAR2,
    p_precio      IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_idOut       OUT NUMBER
) AS
BEGIN
  -- 1) Calcular el siguiente ID_PRODUCTO
  SELECT NVL(MAX(ID_PRODUCTO), 0) + 1
    INTO p_idOut
    FROM SYSTEM.PRODUCTO;

  -- 2) Insertar usando ese ID explícito
  INSERT INTO SYSTEM.PRODUCTO (
      ID_PRODUCTO,
      NOMBRE,
      PRECIO,
      DESCRIPCION
  ) VALUES (
      p_idOut,
      p_nombre,
      p_precio,
      p_descripcion
  );
END SP_INSERTAR_PRODUCTO;
/

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_PRODUCTO (
    p_idProducto   IN NUMBER,
    p_nombre       IN VARCHAR2,
    p_precio       IN NUMBER,
    p_descripcion  IN VARCHAR2
) AS
BEGIN
  UPDATE SYSTEM.PRODUCTO
     SET NOMBRE      = p_nombre,
         PRECIO      = p_precio,
         DESCRIPCION = p_descripcion
   WHERE ID_PRODUCTO = p_idProducto;
END SP_ACTUALIZAR_PRODUCTO;
/
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PRODUCTO (
    p_idProducto  IN NUMBER
) AS
BEGIN
  DELETE FROM SYSTEM.PRODUCTO
   WHERE ID_PRODUCTO = p_idProducto;
END SP_ELIMINAR_PRODUCTO;
/

-- ================================================
-- 1. Stored Procedures para Clientes y su Historial
-- ================================================

-- 1.1 SP_CONSULTAR_CLIENTES: devuelve todos los clientes
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_CLIENTES (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
  SELECT
    ID_CLIENTE,
    NOMBRE,
    APELLIDO,
    TELEFONO,
    CORREO
  FROM SYSTEM.CLIENTE
  ORDER BY ID_CLIENTE;
END SP_CONSULTAR_CLIENTES;
/

-- 1.2 SP_INSERTAR_CLIENTE: inserta un cliente
-- Modificación de SP_INSERTAR_CLIENTE para calcular manualmente el próximo ID
CREATE OR REPLACE PROCEDURE SP_INSERTAR_CLIENTE (
    p_nombre    IN VARCHAR2,
    p_apellido  IN VARCHAR2,
    p_telefono  IN VARCHAR2,
    p_correo    IN VARCHAR2
) AS
    v_new_id NUMBER;
BEGIN
    -- 1) Calcular el siguiente ID_CLIENTE
    SELECT NVL(MAX(ID_CLIENTE), 0) + 1
      INTO v_new_id
      FROM SYSTEM.CLIENTE;

    -- 2) Insertar usando ese ID explícito
    INSERT INTO SYSTEM.CLIENTE (
        ID_CLIENTE,
        NOMBRE,
        APELLIDO,
        TELEFONO,
        CORREO
    ) VALUES (
        v_new_id,
        p_nombre,
        p_apellido,
        p_telefono,
        p_correo
    );
END SP_INSERTAR_CLIENTE;
/


-- 1.3 SP_ACTUALIZAR_CLIENTE: actualiza un cliente existente
CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_CLIENTE (
    p_idCliente   IN NUMBER,
    p_nombre      IN VARCHAR2,
    p_apellido    IN VARCHAR2,
    p_telefono    IN VARCHAR2,
    p_correo      IN VARCHAR2
) AS
BEGIN
  UPDATE SYSTEM.CLIENTE
     SET NOMBRE   = p_nombre,
         APELLIDO = p_apellido,
         TELEFONO = p_telefono,
         CORREO   = p_correo
   WHERE ID_CLIENTE = p_idCliente;
END SP_ACTUALIZAR_CLIENTE;
/

-- 1.4 SP_ELIMINAR_CLIENTE: elimina un cliente por ID
CREATE OR REPLACE PROCEDURE SP_ELIMINAR_CLIENTE (
    p_idCliente IN NUMBER
) AS
BEGIN
  DELETE FROM SYSTEM.CLIENTE
   WHERE ID_CLIENTE = p_idCliente;
END SP_ELIMINAR_CLIENTE;
/

-- 1.5 SP_CONSULTAR_PEDIDOS_POR_CLIENTE: historial de compras
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_PEDIDOS_POR_CLIENTE (
    p_idCliente IN  NUMBER,
    p_cursor    OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
  SELECT
    ID_PEDIDO,
    FECHA,
    TOTAL
  FROM SYSTEM.PEDIDO
  WHERE ID_CLIENTE = p_idCliente
  ORDER BY FECHA;
END SP_CONSULTAR_PEDIDOS_POR_CLIENTE;
/

CREATE OR REPLACE TRIGGER SYSTEM.TRG_PEDIDO_ESTADO_PENDIENTE
BEFORE INSERT ON SYSTEM.PEDIDO
FOR EACH ROW
BEGIN
  IF :NEW.ESTADO IS NULL THEN
    :NEW.ESTADO := 'PENDIENTE';
  END IF;
END TRG_PEDIDO_ESTADO_PENDIENTE;
/

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_ESTADO_PEDIDO (
    p_idPedido IN NUMBER,
    p_estado   IN VARCHAR2
) AS
BEGIN
  UPDATE SYSTEM.PEDIDO
     SET ESTADO = p_estado
   WHERE ID_PEDIDO = p_idPedido;
END SP_ACTUALIZAR_ESTADO_PEDIDO;
/

CREATE OR REPLACE PROCEDURE SP_ELIMINAR_PEDIDO (
    p_idPedido IN NUMBER
) AS
BEGIN
  DELETE FROM SYSTEM.DISENO_PERSONALIZADO   WHERE ID_PEDIDO = p_idPedido;
  DELETE FROM SYSTEM.PEDIDO_PRODUCTO        WHERE ID_PEDIDO = p_idPedido;
  DELETE FROM SYSTEM.PEDIDO                 WHERE ID_PEDIDO = p_idPedido;
END SP_ELIMINAR_PEDIDO;
/
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_PEDIDO_POR_ID (
    p_idPedido IN NUMBER,
    p_cursor   OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      p.ID_PEDIDO,
      p.FECHA,
      p.TOTAL,
      p.ESTADO,
      c.ID_CLIENTE,
      c.NOMBRE   AS CLIENTE_NOMBRE,
      c.APELLIDO AS CLIENTE_APELLIDO,
      c.TELEFONO AS CLIENTE_TELEFONO,
      c.CORREO   AS CLIENTE_CORREO
    FROM SYSTEM.PEDIDO p
    JOIN SYSTEM.CLIENTE c ON c.ID_CLIENTE = p.ID_CLIENTE
    WHERE p.ID_PEDIDO = p_idPedido;
END SP_CONSULTAR_PEDIDO_POR_ID;
/

CREATE OR REPLACE PROCEDURE SP_CONSULTAR_PRODUCTOS_POR_PEDIDO (
    p_idPedido IN NUMBER,
    p_cursor   OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      pp.ID_PRODUCTO,
      pr.NOMBRE,
      pp.CANTIDAD,
      pp.PRECIO_UNITARIO,
      pp.PERSONALIZADO
    FROM SYSTEM.PEDIDO_PRODUCTO pp
    JOIN SYSTEM.PRODUCTO pr ON pr.ID_PRODUCTO = pp.ID_PRODUCTO
    WHERE pp.ID_PEDIDO = p_idPedido;
END SP_CONSULTAR_PRODUCTOS_POR_PEDIDO;
/

-- SP para listar todos los pedidos con su estado
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_PEDIDOS (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT
      ID_PEDIDO,
      ID_CLIENTE,
      TO_CHAR(FECHA, 'YYYY-MM-DD') AS FECHA,
      TOTAL,
      ESTADO
    FROM SYSTEM.PEDIDO
    ORDER BY ID_PEDIDO;
END SP_CONSULTAR_PEDIDOS;
/
CREATE OR REPLACE PROCEDURE SP_CONSULTAR_PRODUCTOS (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT
      ID_PRODUCTO,
      NOMBRE,
      PRECIO,
      DESCRIPCION,
      STOCK
    FROM SYSTEM.PRODUCTO
    ORDER BY ID_PRODUCTO;
END SP_CONSULTAR_PRODUCTOS;
/
CREATE OR REPLACE TRIGGER SYSTEM.TRG_RESTAR_STOCK
AFTER INSERT ON SYSTEM.PEDIDO_PRODUCTO
FOR EACH ROW
BEGIN
  UPDATE SYSTEM.PRODUCTO
     SET STOCK = NVL(STOCK,0) - :NEW.CANTIDAD
   WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO;
END TRG_RESTAR_STOCK;
/

CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_STOCK_PRODUCTO (
    p_idProducto IN NUMBER,
    p_delta      IN NUMBER
) AS
BEGIN
  UPDATE SYSTEM.PRODUCTO
     SET STOCK = NVL(STOCK,0) + p_delta
   WHERE ID_PRODUCTO = p_idProducto;
END SP_ACTUALIZAR_STOCK_PRODUCTO;
/
-- ================================================
-- 1. Stored Procedures para Reportes de Ventas
-- ================================================

-- 1.1 Productos vendidos en el último mes (opcionalmente filtrado por correo)
CREATE OR REPLACE PROCEDURE SP_REP_PRODUCTOS_VENDIDOS_ULTIMO_MES (
    p_email   IN  VARCHAR2,
    p_cursor  OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      pr.ID_PRODUCTO,
      pr.NOMBRE,
      SUM(pp.CANTIDAD) AS TOTAL_VENDIDO
    FROM SYSTEM.PEDIDO_PRODUCTO pp
    JOIN SYSTEM.PEDIDO p   ON p.ID_PEDIDO    = pp.ID_PEDIDO
    JOIN SYSTEM.CLIENTE c  ON c.ID_CLIENTE   = p.ID_CLIENTE
    JOIN SYSTEM.PRODUCTO pr ON pr.ID_PRODUCTO = pp.ID_PRODUCTO
    WHERE p.FECHA >= ADD_MONTHS(TRUNC(SYSDATE), -1)
      AND (p_email IS NULL OR c.CORREO = p_email)
    GROUP BY pr.ID_PRODUCTO, pr.NOMBRE
    ORDER BY TOTAL_VENDIDO DESC;
END SP_REP_PRODUCTOS_VENDIDOS_ULTIMO_MES;
/

-- 1.2 Clientes con más pedidos
CREATE OR REPLACE PROCEDURE SP_REP_TOP_CLIENTES_POR_PEDIDOS (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      c.ID_CLIENTE,
      c.NOMBRE,
      c.APELLIDO,
      COUNT(p.ID_PEDIDO) AS PEDIDOS_COUNT
    FROM SYSTEM.PEDIDO p
    JOIN SYSTEM.CLIENTE c ON c.ID_CLIENTE = p.ID_CLIENTE
    GROUP BY c.ID_CLIENTE, c.NOMBRE, c.APELLIDO
    ORDER BY PEDIDOS_COUNT DESC;
END SP_REP_TOP_CLIENTES_POR_PEDIDOS;
/

-- 1.3 Clientes con mayor valor total de pedidos
CREATE OR REPLACE PROCEDURE SP_REP_TOP_CLIENTES_POR_VALOR (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      c.ID_CLIENTE,
      c.NOMBRE,
      c.APELLIDO,
      SUM(p.TOTAL) AS TOTAL_VENTAS
    FROM SYSTEM.PEDIDO p
    JOIN SYSTEM.CLIENTE c ON c.ID_CLIENTE = p.ID_CLIENTE
    GROUP BY c.ID_CLIENTE, c.NOMBRE, c.APELLIDO
    ORDER BY TOTAL_VENTAS DESC;
END SP_REP_TOP_CLIENTES_POR_VALOR;
/

-- 1.4 Historial de ventas de un cliente (filtrado por correo)
CREATE OR REPLACE PROCEDURE SP_REP_VENTAS_POR_CLIENTE (
    p_email  IN  VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT 
      p.ID_PEDIDO,
      TO_CHAR(p.FECHA, 'YYYY-MM-DD') AS FECHA,
      p.TOTAL,
      p.ESTADO
    FROM SYSTEM.PEDIDO p
    JOIN SYSTEM.CLIENTE c ON c.ID_CLIENTE = p.ID_CLIENTE
    WHERE c.CORREO = p_email
    ORDER BY p.FECHA DESC;
END SP_REP_VENTAS_POR_CLIENTE;
/
CREATE OR REPLACE TRIGGER SYSTEM.TRG_PEDIDO_CREA_ENVIO
AFTER INSERT ON SYSTEM.PEDIDO
FOR EACH ROW
DECLARE
  v_new_id NUMBER;
BEGIN
  SELECT NVL(MAX(ID_ENVIO),0)+1
    INTO v_new_id
    FROM SYSTEM.ENVIO;

  INSERT INTO SYSTEM.ENVIO (
    ID_ENVIO,
    ID_PEDIDO,
    FECHA_ENVIO,
    EMPRESA,
    ESTADO_ENVIO
  ) VALUES (
    v_new_id,
    :NEW.ID_PEDIDO,
    SYSDATE,
    'CORREOS DE COSTA RICA',
    'PENDIENTE'
  );
END TRG_PEDIDO_CREA_ENVIO;
/


CREATE OR REPLACE PROCEDURE SP_ACTUALIZAR_ENVIO (
    p_idEnvio   IN NUMBER,
    p_estado    IN VARCHAR2,
    p_detalle   IN VARCHAR2
) AS
BEGIN
  UPDATE SYSTEM.ENVIO
     SET ESTADO_ENVIO = p_estado,
         DETALLE      = p_detalle
   WHERE ID_ENVIO = p_idEnvio;
END SP_ACTUALIZAR_ENVIO;
/


CREATE OR REPLACE PROCEDURE SP_ELIMINAR_ENVIO (
    p_idEnvio IN NUMBER
) AS
BEGIN
  DELETE FROM SYSTEM.ENVIO
   WHERE ID_ENVIO = p_idEnvio;
END SP_ELIMINAR_ENVIO;
/


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_ENVIOS (
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT
      ID_ENVIO,
      ID_PEDIDO,
      TO_CHAR(FECHA_ENVIO,'YYYY-MM-DD') AS FECHA_ENVIO,
      EMPRESA,
      ESTADO_ENVIO,
      DETALLE
    FROM SYSTEM.ENVIO
    ORDER BY ID_ENVIO;
END SP_CONSULTAR_ENVIOS;
/

CREATE OR REPLACE PROCEDURE SP_CONSULTAR_ENVIO_POR_PEDIDO (
    p_idPedido IN  NUMBER,
    p_cursor   OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT
      ID_ENVIO,
      ID_PEDIDO,
      TO_CHAR(FECHA_ENVIO,'YYYY-MM-DD') AS FECHA_ENVIO,
      EMPRESA,
      ESTADO_ENVIO,
      DETALLE
    FROM SYSTEM.ENVIO
    WHERE ID_PEDIDO = p_idPedido;
END SP_CONSULTAR_ENVIO_POR_PEDIDO;
/



-- =================== DATOS DE PRUEBA ==========================

-- 1. Clientes
INSERT INTO SYSTEM.CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES (1, 'JONATHAN', 'ROJAS',    '60696494',     'jrojass2290@gmail.com');
INSERT INTO SYSTEM.CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES (2, 'ANGIE',    'UMAÑA',    '88888888',     'auman@gmail.com');
INSERT INTO SYSTEM.CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES (3, 'CARLOS',   'HERNANDEZ',       '88881234',     'carlos@mail.com');
INSERT INTO SYSTEM.CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES (4, 'MARÍA',    'PÉREZ',    '70123456',     'mperez@correo.com');
INSERT INTO SYSTEM.CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, TELEFONO, CORREO) VALUES (5, 'LUIS',     'GONZÁLEZ', '61234567',     'lgonzalez@ejemplo.com');

-- 2. Productos
INSERT INTO SYSTEM.PRODUCTO (ID_PRODUCTO, NOMBRE,  PRECIO,  DESCRIPCION,        ESTADO, STOCK) VALUES (1, 'TASA',        2000,   'Color blanco',      'A', 50);
INSERT INTO SYSTEM.PRODUCTO (ID_PRODUCTO, NOMBRE,  PRECIO,  DESCRIPCION,        ESTADO, STOCK) VALUES (2, 'CAMISETA',    15000,  'Algodón 100%',      'A', 30);
INSERT INTO SYSTEM.PRODUCTO (ID_PRODUCTO, NOMBRE,  PRECIO,  DESCRIPCION,        ESTADO, STOCK) VALUES (3, 'GORRA',       8000,   'Visera plana',      'A', 20);
INSERT INTO SYSTEM.PRODUCTO (ID_PRODUCTO, NOMBRE,  PRECIO,  DESCRIPCION,        ESTADO, STOCK) VALUES (4, 'LLAVERO',     1200,   'Metal cromado',     'A', 100);
INSERT INTO SYSTEM.PRODUCTO (ID_PRODUCTO, NOMBRE,  PRECIO,  DESCRIPCION,        ESTADO, STOCK) VALUES (5, 'MOCHILA',     25000,  'Poliéster resistente','A', 15);


